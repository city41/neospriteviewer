{"version":3,"sources":["webpack:///./src/components/tile.tsx","webpack:///./src/components/cDataLoader.tsx","webpack:///./src/pages/index.tsx"],"names":["CORNER_WIDTH","TILE_WIDTH","CORNER_HEIGHT","TILE_HEIGHT","palette","Array","fill","map","_","i","value","buildCorner","pixelStream","startIndex","rows","y","cells","x","color","push","unshift","console","log","CORNER_POSITIONS","renderTile","corners","context","forEach","corner","imageData","createImageData","index","c","data","placeData","putImageData","MemoedTile","React","memo","_ref","className","cData","canvasEl","useRef","useEffect","current","width","height","getContext","extractCorners","tileIndex","endIndex","pixels","plane0","c1Data","plane1","plane2","c2Data","plane3","b","paletteIndex","getPixels","classes","classnames","react_default","a","createElement","ref","isC1File","file","name","length","parseInt","setConfig","pureSFC","CDataLoader","onLoad","_useState","useState","statusMessage","setStatusMessage","type","onChange","e","files","target","fr","FileReader","onload","e1","fr2","e2","Uint8Array","result","readAsArrayBuffer","multiple","__webpack_exports__","setCData","cDataLoader_CDataLoader","numTiles","getTileIndices","t","key"],"mappings":"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","file":"component---src-pages-index-tsx-f672efed1fe9bf219b97.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport Spinner from \"react-spinkit\";\nimport classnames from \"classnames\";\nimport { CData } from \"../interfaces\";\n\nconst TILE_WIDTH = 16;\nconst TILE_HEIGHT = 16;\nconst CORNER_WIDTH = TILE_WIDTH / 2;\nconst CORNER_HEIGHT = TILE_HEIGHT / 2;\n\nconst PIXEL_STREAM_LENGTH = 16 * 16;\n\ninterface RenderTileProps {\n    className?: string;\n    cData: CData | null;\n    index: number;\n}\n\nconst step = 256 / 16;\nconst palette = new Array(15).fill(1, 0, 15).map((_, i) => {\n    const value = (i + 1) * step;\n    return [value, value, value, 255];\n});\n\npalette.unshift([255, 0, 0, 255 * 0.2]);\nconsole.log(\"palette\", palette);\n\nfunction getPixels(cData: CData, tileIndex: number) {\n    const startIndex = tileIndex * 64;\n    const endIndex = (tileIndex + 1) * 64;\n\n    const pixels = [];\n\n    for (let i = startIndex; i < endIndex; i += 2) {\n        const plane0 = cData.c1Data[i];\n        const plane1 = cData.c1Data[i + 1];\n        const plane2 = cData.c2Data[i];\n        const plane3 = cData.c2Data[i + 1];\n\n        for (let b = 0; b < 8; ++b) {\n            let paletteIndex = 0;\n            paletteIndex |= (plane0 >> b) & 1;\n            paletteIndex |= ((plane1 >> b) & 1) << 1;\n            paletteIndex |= ((plane2 >> b) & 1) << 2;\n            paletteIndex |= ((plane3 >> b) & 1) << 3;\n\n            pixels.push(palette[paletteIndex]);\n        }\n    }\n\n    return pixels;\n}\n\nfunction buildCorner(pixelStream, startIndex) {\n    const rows = [];\n    for (let y = 0; y < 8; ++y) {\n        const cells = [];\n        for (let x = 0; x < 8; ++x) {\n            const cornerIndex = y * 8 + x;\n            const pixelIndex = startIndex + cornerIndex;\n\n            const color = pixelStream[pixelIndex];\n\n            cells.push(color);\n        }\n\n        rows.push(cells);\n    }\n\n    return rows;\n}\n\nfunction extractCorners(pixelStream) {\n    const cornerSize = 8 * 8;\n\n    return [\n        buildCorner(pixelStream, 2 * cornerSize), // upper left\n        buildCorner(pixelStream, 0 * cornerSize), // upper right\n        buildCorner(pixelStream, 3 * cornerSize), // lower left\n        buildCorner(pixelStream, 1 * cornerSize) // lower right\n    ];\n}\n\nfunction placeData(imageData, corner) {\n    for (let y = 0; y < CORNER_HEIGHT; ++y) {\n        for (let x = 0; x < CORNER_WIDTH; ++x) {\n            const index = (y * CORNER_WIDTH + x) * 4;\n            const color = corner[y][x];\n\n            for (let c = 0; c < 4; ++c) {\n                imageData.data[index + c] = color[c];\n            }\n        }\n    }\n}\n\nconst CORNER_POSITIONS = [\n    // upper left\n    [0, 0],\n    // upper right\n    [8, 0],\n    // lower left\n    [0, 8],\n    // lower right\n    [8, 8]\n];\n\nfunction renderTile(corners, context) {\n    corners.forEach((corner, i) => {\n        const imageData = context.createImageData(CORNER_WIDTH, CORNER_HEIGHT);\n        placeData(imageData, corner);\n        context.putImageData(imageData, CORNER_POSITIONS[i][0], CORNER_POSITIONS[i][1]);\n    });\n}\n\nconst Tile: React.StatelessComponent<RenderTileProps> = ({ className, cData, index }) => {\n    if (!cData) return null;\n\n    const canvasEl = useRef(null);\n\n    useEffect(() => {\n        canvasEl.current.width = TILE_WIDTH;\n        canvasEl.current.height = TILE_HEIGHT;\n\n        const context = canvasEl.current.getContext(\"2d\");\n\n        const pixelStream = getPixels(cData, index);\n\n        const corners = extractCorners(pixelStream);\n        const tile = renderTile(corners, context);\n    });\n\n    const classes = classnames(className);\n    return <canvas className={classes} ref={canvasEl} />;\n};\n\nconst TilePlaceholder: React.StatelessComponent<{}> = () => {\n    return (\n        <div className=\"tilePlaceholder\">\n            <Spinner name=\"pulse\" />\n        </div>\n    );\n};\n\nconst MemoedTile = React.memo(Tile);\nexport { MemoedTile as Tile, TilePlaceholder };\n","import React, { useState } from \"react\";\nimport classnames from \"classnames\";\nimport { CData } from \"../interfaces\";\n\nimport { setConfig } from \"react-hot-loader\";\n// @ts-ignore: the typing for setConfig doesn't have this prop but it does work\nsetConfig({ pureSFC: true });\n\ninterface CDataLoaderProps {\n    className?: string;\n    onLoad: (cData: CData) => void;\n}\n\nfunction isC1File(file) {\n    const index = file.name[file.name.length - 1];\n\n    return !!(parseInt(index, 10) & 1);\n}\n\nconst CDataLoader: React.StatelessComponent<CDataLoaderProps> = ({ className, onLoad }) => {\n    const [statusMessage, setStatusMessage] = useState<string | null>(null);\n\n    function onFilesChosen(e: React.ChangeEvent<HTMLInputElement>) {\n        setStatusMessage(null);\n\n        const files = e.target.files;\n\n        if (files.length !== 2) {\n            return setStatusMessage(\"Please choose a pair of C ROM files\");\n        }\n\n        const fr = new FileReader();\n\n        fr.onload = e1 => {\n            const fr2 = new FileReader();\n            fr2.onload = e2 => {\n                const c1Data = new Uint8Array(isC1File(files[0]) ? e1.target.result : e2.target.result);\n                const c2Data = new Uint8Array(isC1File(files[0]) ? e2.target.result : e1.target.result);\n\n                onLoad({ c1Data, c2Data });\n            };\n            fr2.readAsArrayBuffer(files[1]);\n        };\n\n        fr.readAsArrayBuffer(files[0]);\n    }\n\n    return (\n        <div>\n            <input type=\"file\" onChange={onFilesChosen} multiple={true} />\n            {statusMessage}\n        </div>\n    );\n};\n\nexport { CDataLoader };\n","import React, { useState } from \"react\";\nimport LazyLoad from \"react-lazyload\";\nimport { Tile, TilePlaceholder } from \"../components/tile\";\nimport { CDataLoader } from \"../components/cDataLoader\";\nimport { CData } from \"../interfaces\";\n\nimport \"./index.css\";\n\n/* const tiles = new Array(1).fill(1, 0, 15).map((_, i) => i + 70); */\nconst tiles = new Array(100).fill(1, 0, 100).map((_, i) => i + 0);\n\nfunction getTileIndices(cData: CData | null) {\n    if (!cData) {\n        return [];\n    }\n\n    // one byte is 1/4th of 8 pixels, so essentially 2 pixels\n    // c1 has half the tile data\n    // so... length / (256\n    const numTiles = cData.c1Data.length / (256 / 2) / 2;\n\n    console.log(numTiles, \"numTiles\");\n\n    return new Array(numTiles).fill(1, 0, numTiles).map((_, i) => i + 0);\n}\n\nexport default () => {\n    const [cData, setCData] = useState<CData | null>(null);\n    console.log(\"cData\", cData);\n\n    return (\n        <div>\n            <h1>A Neo Geo Sprite Tile Viewer</h1>\n            <CDataLoader onLoad={setCData} />\n\n            {getTileIndices(cData).map((t, i) => (\n                <Tile key={i} className=\"tile\" cData={cData} index={t} />\n            ))}\n        </div>\n    );\n};\n"],"sourceRoot":""}